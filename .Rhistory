print(stepmedianex)
stepmean <- mean(stepsum$totalsteps)
stepmean
stepmean
stepmeanex <- mean(stepsumex$totalsteps)
stepmeanex
stepmedianex
stepdatasub <- subset(stepdata, steps != "NA")
## Group data and summarize by day
byday <- group_by(stepdatasub, date)
stepsum <- ddply(byday, "date", summarize, totalsteps = sum(steps))
## Part 2 - Mean and total steps per day
## Plot histogram of the total steps by day
hist(stepsum$totalsteps, col = "blue4", main = "Steps Per Day", xlab = "Total Steps")
##  Sort stepsum to obtain the median
stepsumsorted <- sort(stepsum$totalsteps)
stepmean <- mean(stepsum$totalsteps)
##stepmean <- summarize(byday, meansteps=mean(steps))
stepmedian <- median(stepsumsorted)
print(stepmean)
print(stepmedian)
nasub <- subset(stepdata, is.na(steps))
nacount <- nrow(nasub)
print(nacount)
## Calculate the mean value for each interval
intervalmean <- ddply(stepdatasub, "interval", summarize, stepmean = mean(steps))
## Merge the interval mean with the orignal data set to obtain the mean values by interval
stepdataex <- merge(stepdata, intervalmean, by = "interval")
## Fill in the NA values with the interval mean values
stepdataex$steps[is.na(stepdataex$steps)] <- stepdataex$stepmean[is.na(stepdataex$steps)]
## Subset dataset to be equivalent to original dataset
stepdataex <- subset(stepdataex, select = c(steps, date, interval))
## Determine mean and median for new data set
## Group data and summarize by day
bydayex <- group_by(stepdataex, date)
stepsumex <- ddply(bydayex, "date", summarize, totalsteps = sum(steps))
## Plot histogram of the total steps by day
hist(stepsumex$totalsteps, col = "blue4", main = "Steps Per Day", xlab = "Total Steps")
##  Sort stepsum to obtain the median
stepsumexsorted <- sort(stepsumex$totalsteps)
stepmeanex <- mean(stepsumex$totalsteps)
##stepmeanex <- summarize(byday, meansteps=mean(steps))
stepmedianex <- median(stepsumexsorted)
print(stepmeanex)
print(stepmedianex)
stepmean
stepmeanex
stepsumsorted <- sort(stepsum$totalsteps)
stepmean <- mean(stepsum$totalsteps)
##stepmean <- summarize(byday, meansteps=mean(steps))
stepmedian <- median(stepsumsorted)
print(stepmean)
print(stepmedian)
stepsumsorted <- sort(stepsum$totalsteps)
stepmeancalc <- mean(stepsum$totalsteps)
##stepmean <- summarize(byday, meansteps=mean(steps))
stepmediancalc <- median(stepsumsorted)
print(stepmeancalc)
print(stepmediancalc)
nasub <- subset(stepdata, is.na(steps))
nacount <- nrow(nasub)
print(nacount)
## Calculate the mean value for each interval
intervalmean <- ddply(stepdatasub, "interval", summarize, stepmean = mean(steps))
## Merge the interval mean with the orignal data set to obtain the mean values by interval
stepdataex <- merge(stepdata, intervalmean, by = "interval")
## Fill in the NA values with the interval mean values
stepdataex$steps[is.na(stepdataex$steps)] <- stepdataex$stepmean[is.na(stepdataex$steps)]
## Subset dataset to be equivalent to original dataset
stepdataex <- subset(stepdataex, select = c(steps, date, interval))
## Determine mean and median for new data set
## Group data and summarize by day
bydayex <- group_by(stepdataex, date)
stepsumex <- ddply(bydayex, "date", summarize, totalsteps = sum(steps))
## Plot histogram of the total steps by day
hist(stepsumex$totalsteps, col = "blue4", main = "Steps Per Day", xlab = "Total Steps")
##  Sort stepsum to obtain the median
stepsumexsorted <- sort(stepsumex$totalsteps)
stepmeanex <- mean(stepsumex$totalsteps)
##stepmeanex <- summarize(byday, meansteps=mean(steps))
stepmedianex <- median(stepsumexsorted)
print(stepmeanex)
print(stepmedianex)
stepmeanex
stepmedianex
stepsumexsorted
stepsumex
stempmeancalc
stepmeancalc <- mean(stepsum$totalsteps)
##stepmean <- summarize(byday, meansteps=mean(steps))
stepmediancalc <- median(stepsumsorted)
stepmeancalc
nacount
nasub
intervalmean
stepdataex <- merge(stepdata, intervalmean, by = "interval")
stepdataex
stepdataex$steps[is.na(stepdataex$steps)] <- stepdataex$stepmean[is.na(stepdataex$steps)]
stepdataex
head(stepdataex)
head(stepdataex,20)
stepdataex <- subset(stepdataex, select = c(steps, date, interval))
head(stepdataex,20)
bydayex <- group_by(stepdataex, date)
stepsumex <- ddply(bydayex, "date", summarize, totalsteps = sum(steps))
stepsumex
hist(stepsumex$totalsteps, col = "blue4", main = "Steps Per Day", xlab = "Total Steps")
hist(stepsumex$totalsteps, col = "blue4", main = "Steps Per Day - Extrapolated For Missing Data",
xlab = "Total Steps")
ggplot(data = intervalmean, aes(x=interval, y=stepmean)) + geom_point() +
xlab("Interval") +
ylab("Mean Steps") +
ggtitle("Average Daily Steps by 5 Minute Interval")
hist(stepsum$totalsteps, col = "blue4", main = "Steps Per Day", xlab = "Total Steps")
ggplot(data = intervalmean, aes(x=interval, y=stepmean)) + geom_point() +
xlab("Interval") +
ylab("Mean Steps") +
ggtitle("Average Daily Steps by 5 Minute Interval")
hist(stepsum$totalsteps, col = "blue4", main = "Steps Per Day", xlab = "Total Steps")
hist(stepsumex$totalsteps, col = "blue4", main = "Steps Per Day - Extrapolated For Missing Data",
xlab = "Total Steps")
stepsumexsorted <- sort(stepsumex$totalsteps)
stepmeanex <- mean(stepsumex$totalsteps)
##stepmeanex <- summarize(byday, meansteps=mean(steps))
stepmedianex <- median(stepsumexsorted)
stepmeanex
stepmedianex
stepdataex <- cbind(stepdataex, c("NA"))
colnames(stepdataex) <- c("steps", "date", "interval", "weekday")
## Loop through data set and determine if day was a weekday or not
for(i in 1:nrow(stepdataex)) {
dayofweek <- (weekdays(as.Date(stepdataex[i, 2], format="%Y-%m-%d")))
if (dayofweek %in% c("Saturday", "Sunday")) {
stepdataex[i, 4] <- "Weekend"
}
else {
stepdataex[i, 4] <- "Weekday"
}
}
## Plot activity based on weekday/weekend
qplot(interval, steps, data = stepdataex, facets = .~weekday)
warnings()
stepdataex
summary(stepdataex)
head(stepdataex)
dayofweek <- (weekdays(as.Date(stepdataex[1, 2], format="%Y-%m-%d")))
dayofweek
dayofweek <- (weekdays(as.Date(stepdataex[17, 2], format="%Y-%m-%d")))
dayofweek
dayofweek <- (weekdays(as.Date(stepdataex[19, 2], format="%Y-%m-%d")))
dayofweek
if (dayofweek %in% c("Saturday", "Sunday")) {
##                stepdataex[i, 4] <- "Weekend"
##            }
)
if (dayofweek %in% c("Saturday", "Sunday")) {
stepdataex[19, 4] <- "Weekend"
}
?in
?factor
for(i in 1:nrow(stepdataex)) {
dayofweek <- (weekdays(as.Date(stepdataex[i, 2], format="%Y-%m-%d")))
if (dayofweek %in% c("Saturday", "Sunday")) {
stepdataex[i, 4] <- "Weekend"
}
else {
stepdataex[i, 4] <- "Weekday"
}
}
stepdataex
head(stepdataex)
for(i in 1:nrow(stepdataex)) {
dayofweek <- (weekdays(as.Date(stepdataex[i, 2], format="%Y-%m-%d")))
if (dayofweek == "Saturday" | dayofweek == "Sunday")) {
stepdataex[i, 4] <- "Weekend"
}
else {
stepdataex[i, 4] <- "Weekday"
}
}
for(i in 1:nrow(stepdataex)) {
dayofweek <- (weekdays(as.Date(stepdataex[i, 2], format="%Y-%m-%d")))
if (dayofweek == "Saturday" | dayofweek == "Sunday") {
stepdataex[i, 4] <- "Weekend"
}
else {
stepdataex[i, 4] <- "Weekday"
}
}
head(stepdataex)
for(i in 1:nrow(stepdataex)) {
dayofweek <- (weekdays(as.Date(stepdataex[i, 2], format="%Y-%m-%d")))
if (dayofweek == "Saturday") {
stepdataex[i, 4] <- "Weekend"
}
else if ( dayofweek == "Sunday") {
stepdataex[i, 4] <- "Weekend"
}
else {
stepdataex[i, 4] <- "Weekday"
}
}
head(stepdataex)
if( weekdays(as.Date(stepdataex[i, 2], format="%Y-%m-%d") )){print("yes")}
weekends <- c("Saturday", "Sunday")
weekends
weekends[1]
weekends[2]
?grepl
for(i in 1:nrow(stepdataex)) {
dayofweek <- (weekdays(as.Date(stepdataex[i, 2], format="%Y-%m-%d")))
if (grep(weekends, dayofweek)) {
stepdataex[i, 4] <- "Weekend"
}
else {
stepdataex[i, 4] <- "Weekday"
}
}
for(i in 1:nrow(stepdataex)) {
dayofweek <- (weekdays(as.Date(stepdataex[i, 2], format="%Y-%m-%d")))
if (grep("Saturday", dayofweek)) {
stepdataex[i, 4] <- "Weekend"
}
else if (grep("Sunday", dayofweek)) {
stepdataex[i, 4] <- "Weekend"
}
else {
stepdataex[i, 4] <- "Weekday"
}
}
for(i in 1:nrow(stepdataex)) {
dayofweek <- (weekdays(as.Date(stepdataex[i, 2], format="%Y-%m-%d")))
if (grep("Saturday", dayofweek)) {
stepdataex[i, 4] <- "Weekend"
}
else if (grep("Sunday", dayofweek)) {
stepdataex[i, 4] <- "Weekend"
}
else {
stepdataex[i, 4] <- "Weekday"
}
}
dayofweek
grep("Saturday", dayofweek)
grepl("Saturday", dayofweek)
for(i in 1:nrow(stepdataex)) {
dayofweek <- (weekdays(as.Date(stepdataex[i, 2], format="%Y-%m-%d")))
if (grepl("Saturday", dayofweek)) {
stepdataex[i, 4] <- "Weekend"
}
else if (grepl("Sunday", dayofweek)) {
stepdataex[i, 4] <- "Weekend"
}
else {
stepdataex[i, 4] <- "Weekday"
}
}
head(stepdataex)
warnings()
grepl("Saturday", dayofweek)
dayofweek
grepl("Friday", dayofweek)
stepdataex[i, 4] <- "Weekend"
stepdataex[i, 4] <- "Y"
stepdataex <- cbind(stepdataex, c("NA"))
stepdataex
head(stepdataex)
library(plyr)
library(dplyr)
library(ggplot2)
setwd("C:\\Users\\panasta\\Documents\\R\\5 - Reproducible Research\\Assignment 1\\RepData_PeerAssessment1")
stepdatafile <- paste(getwd(), "/activity.csv", sep="")
stepdata <- read.csv(stepdatafile, header = TRUE, na.strings = "NA")
## Part 1 - Load and Process Data
## Subset for all lines with no NA values
stepdatasub <- subset(stepdata, steps != "NA")
## Group data and summarize by day
byday <- group_by(stepdatasub, date)
stepsum <- ddply(byday, "date", summarize, totalsteps = sum(steps))
## Part 2 - Mean and total steps per day
## Plot histogram of the total steps by day
hist(stepsum$totalsteps, col = "blue4", main = "Steps Per Day", xlab = "Total Steps")
##  Sort stepsum to obtain the median
stepsumsorted <- sort(stepsum$totalsteps)
## Calculate the mean and median steps by day
stepmeancalc <- mean(stepsum$totalsteps)
stepmediancalc <- median(stepsumsorted)
print(stepmeancalc)
print(stepmediancalc)
## Part 3 - Average Daily Pattern
## Calculate average setps by interval
intervalmean <- ddply(stepdatasub, "interval", summarize, stepmean = mean(steps))
## Plot steps by interval
ggplot(data = intervalmean, aes(x=interval, y=stepmean)) + geom_point() +
xlab("Interval") +
ylab("Mean Steps") +
ggtitle("Average Daily Steps by 5 Minute Interval")
## Find interval with the maximum mean steps
intervalmeansorted <- arrange(intervalmean, desc(stepmean))
maxmeanstepinterval <- intervalmeansorted[1,1]
print(maxmeanstepinterval)
## Part 4 - Extrapolate For Missing Values
## Calculate to total number of NA rows in the initial dataset
nasub <- subset(stepdata, is.na(steps))
nacount <- nrow(nasub)
print(nacount)
## Calculate the mean value for each interval
intervalmean <- ddply(stepdatasub, "interval", summarize, stepmean = mean(steps))
## Merge the interval mean with the orignal data set to obtain the mean values by interval
stepdataex <- merge(stepdata, intervalmean, by = "interval")
## Fill in the NA values with the interval mean values
stepdataex$steps[is.na(stepdataex$steps)] <- stepdataex$stepmean[is.na(stepdataex$steps)]
## Subset dataset to be equivalent to original dataset
stepdataex <- subset(stepdataex, select = c(steps, date, interval))
## Determine mean and median for new data set
## Group data and summarize by day
bydayex <- group_by(stepdataex, date)
stepsumex <- ddply(bydayex, "date", summarize, totalsteps = sum(steps))
## Plot histogram of the total steps by day
hist(stepsumex$totalsteps, col = "blue4", main = "Steps Per Day - Extrapolated For Missing Data",
xlab = "Total Steps")
##  Sort stepsum to obtain the median
stepsumexsorted <- sort(stepsumex$totalsteps)
## Calculate the mean and median steps by day
stepmeanex <- mean(stepsumex$totalsteps)
stepmedianex <- median(stepsumexsorted)
print(stepmeanex)
print(stepmedianex)
stepdataex <- cbind(stepdataex, c("NA"))
colnames(stepdataex) <- c("steps", "date", "interval", "weekday")
stepdataex[i, 4] <- 1
stepdataex[1, 4] <- 1
weekends <- c("Saturday", "Sunday")
factor(weekends)
weekends
levels(weekends)
fweekends = factor(weekends)
fweekends
levels(fweekends)
stepdataex2 <- data.frame(stepdataex, c("NA"))
stepdataex <- NULL
stepdataex <- merge(stepdata, intervalmean, by = "interval")
## Fill in the NA values with the interval mean values
stepdataex$steps[is.na(stepdataex$steps)] <- stepdataex$stepmean[is.na(stepdataex$steps)]
## Subset dataset to be equivalent to original dataset
stepdataex <- subset(stepdataex, select = c(steps, date, interval))
## Determine mean and median for new data set
## Group data and summarize by day
bydayex <- group_by(stepdataex, date)
stepsumex <- ddply(bydayex, "date", summarize, totalsteps = sum(steps))
## Plot histogram of the total steps by day
hist(stepsumex$totalsteps, col = "blue4", main = "Steps Per Day - Extrapolated For Missing Data",
xlab = "Total Steps")
##  Sort stepsum to obtain the median
stepsumexsorted <- sort(stepsumex$totalsteps)
## Calculate the mean and median steps by day
stepmeanex <- mean(stepsumex$totalsteps)
stepmedianex <- median(stepsumexsorted)
print(stepmeanex)
print(stepmedianex)
stepdataex <- data.frame(stepdataex, c("NA"))
summary(stepdataex)
str(stepdataex)
colnames(stepdataex) <- c("steps", "date", "interval", "weekday")
str(stepdataex)
dayofweek
dayofweek <- (weekdays(as.Date(stepdataex[1, 2], format="%Y-%m-%d")))
dayofweek
grepl("Saturday", dayofweek)
if(grepl("Saturday", dayofweek)) {stepdata[1,4] <- "Weekend"}
head(stepdataex)
head(stepdata)
if(grepl("Saturday", dayofweek)) {stepdataex[1,4] <- "Weekend"}
head(stepdataex)
if(grepl("Friday", dayofweek)) {stepdataex[1,4] <- "Weekend"}
head(stepdataex)
dayofweek
if(grepl("Monday", dayofweek)) {stepdataex[1,4] <- "Weekend"}
?data.frame
stepdataex <- factor(weekdays(as.Date(stepdataex$date, format="%Y-%m-%d"))))
stepdataex <- factor(weekdays(as.Date(stepdataex$date, format="%Y-%m-%d")))
head(stepdataex)
stepdataex$date <- factor(weekdays(as.Date(stepdataex$date, format="%Y-%m-%d")))
library(plyr)
library(dplyr)
library(ggplot2)
setwd("C:\\Users\\panasta\\Documents\\R\\5 - Reproducible Research\\Assignment 1\\RepData_PeerAssessment1")
stepdatafile <- paste(getwd(), "/activity.csv", sep="")
stepdata <- read.csv(stepdatafile, header = TRUE, na.strings = "NA")
## Part 1 - Load and Process Data
## Subset for all lines with no NA values
stepdatasub <- subset(stepdata, steps != "NA")
## Group data and summarize by day
byday <- group_by(stepdatasub, date)
stepsum <- ddply(byday, "date", summarize, totalsteps = sum(steps))
## Part 2 - Mean and total steps per day
## Plot histogram of the total steps by day
hist(stepsum$totalsteps, col = "blue4", main = "Steps Per Day", xlab = "Total Steps")
##  Sort stepsum to obtain the median
stepsumsorted <- sort(stepsum$totalsteps)
## Calculate the mean and median steps by day
stepmeancalc <- mean(stepsum$totalsteps)
stepmediancalc <- median(stepsumsorted)
print(stepmeancalc)
print(stepmediancalc)
## Part 3 - Average Daily Pattern
## Calculate average setps by interval
intervalmean <- ddply(stepdatasub, "interval", summarize, stepmean = mean(steps))
## Plot steps by interval
ggplot(data = intervalmean, aes(x=interval, y=stepmean)) + geom_point() +
xlab("Interval") +
ylab("Mean Steps") +
ggtitle("Average Daily Steps by 5 Minute Interval")
## Find interval with the maximum mean steps
intervalmeansorted <- arrange(intervalmean, desc(stepmean))
maxmeanstepinterval <- intervalmeansorted[1,1]
print(maxmeanstepinterval)
## Part 4 - Extrapolate For Missing Values
## Calculate to total number of NA rows in the initial dataset
nasub <- subset(stepdata, is.na(steps))
nacount <- nrow(nasub)
print(nacount)
## Calculate the mean value for each interval
intervalmean <- ddply(stepdatasub, "interval", summarize, stepmean = mean(steps))
## Merge the interval mean with the orignal data set to obtain the mean values by interval
stepdataex <- merge(stepdata, intervalmean, by = "interval")
## Fill in the NA values with the interval mean values
stepdataex$steps[is.na(stepdataex$steps)] <- stepdataex$stepmean[is.na(stepdataex$steps)]
## Subset dataset to be equivalent to original dataset
stepdataex <- subset(stepdataex, select = c(steps, date, interval))
## Determine mean and median for new data set
## Group data and summarize by day
bydayex <- group_by(stepdataex, date)
stepsumex <- ddply(bydayex, "date", summarize, totalsteps = sum(steps))
## Plot histogram of the total steps by day
hist(stepsumex$totalsteps, col = "blue4", main = "Steps Per Day - Extrapolated For Missing Data",
xlab = "Total Steps")
##  Sort stepsum to obtain the median
stepsumexsorted <- sort(stepsumex$totalsteps)
## Calculate the mean and median steps by day
stepmeanex <- mean(stepsumex$totalsteps)
stepmedianex <- median(stepsumexsorted)
print(stepmeanex)
print(stepmedianex)
stepdataex <- data.frame(stepdataex, c("NA"))
colnames(stepdataex) <- c("steps", "date", "interval", "weekday")
View(bydayex)
stepdataex$weekday <- factor(weekdays(as.Date(stepdataex$date, format="%Y-%m-%d"))))
stepdataex$weekday <- factor(weekdays(as.Date(stepdataex$date, format="%Y-%m-%d")))
head(stepdataex)
str(stepdataex)
summary(stepdataex)
qplot(interval, steps, data = stepdataex, facets = .~weekday)
?levels
levels(stepdataex$weekday)
?factor
levels(stepdataex$weekday) <- list(weekday = c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday"), weekend = c("Saturday", "Sunday"))
levels(stepdataex$weekday)
summary(stepdataex)
qplot(interval, steps, data = stepdataex, facets = .~weekday)
qplot(interval, steps, data = stepdataex,
facets = .~weekday,
geom_smooth             )
geom_smooth             )
qplot(steps, data = stepdataex,
facets = .~weekday,
geom_smooth             )
qplot(interval, steps, data = stepdataex,
facets = .~weekday,
geom_smooth             )
qplot(interval, steps, type = "1", data = stepdataex,
facets = .~weekday)
?type
?qplot
?ggplot
qplot(interval, steps, data=stepdataex,
geom=c("line"),type="l",facets=weekday~.) +
ylab("Average Number of Steps") +
theme_set(theme_gray(base_size = 15)) +
ggtitle("Number of Steps per Interval Split \n  Weekday vs. Weekend")
qplot(interval, steps, data=stepdataex,
geom=c("line"),type="l",facets=~.weekday) +
ylab("Average Number of Steps") +
theme_set(theme_gray(base_size = 15)) +
ggtitle("Number of Steps per Interval Split \n  Weekday vs. Weekend")
qplot(interval, steps, data=stepdataex,
geom=c("line"),type="l",facets=weekday~.) +
ylab("Average Number of Steps") +
theme_set(theme_gray(base_size = 15)) +
ggtitle("Number of Steps per Interval Split \n  Weekday vs. Weekend")
qplot(interval, steps, data = stepdataex,
geom = c("line"), type="l", facets=weekday~.) +
ylab("Steps") +
xlab("Interval") +
ggtitle("Number of Steps per Interval - Weekdays vs. Weekends")
?geom
?qplot
qplot(interval, steps, data = stepdataex,
geom = c("line"), color = "blue", type = "l", facets = weekday~.) +
ylab("Steps") +
xlab("Interval") +
ggtitle("Number of Steps per Interval - Weekdays vs. Weekends")
qplot(interval, steps, data = stepdataex,
geom = c("line"), color = weekday, type = "l", facets = weekday~.) +
ylab("Steps") +
xlab("Interval") +
ggtitle("Number of Steps per Interval - Weekdays vs. Weekends")
qplot(interval, steps, data = stepdataex,
geom = c("line"), type = "l", facets = weekday~.) +
ylab("Steps") +
xlab("Interval") +
ggtitle("Number of Steps per Interval - Weekdays vs. Weekends")
